{"ast":null,"code":"var _jsxFileName = \"/Users/code/Desktop/WEB/lab-sistemas/frontend/src/Components/LED.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport { converter } from \"./binDec\";\nimport { NumberConverter } from \"./ArduinoData\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GET_CLIENTS = gql`\n  query {\n    clients {\n      id\n      state\n    }\n  }\n`;\nexport const EDIT_CLIENT = gql`\n  mutation editClient($editClientObject: EditClientInput!) {\n    editClient(editClientObject: $editClientObject) {\n      id\n      state\n    }\n  }\n`;\nconst LED = props => {\n  _s();\n  const [editClient, editClientInfo] = useMutation(EDIT_CLIENT);\n  const handleEdit = async (id, value) => {\n    const result = await editClient({\n      variables: {\n        editClientObject: {\n          id: id,\n          state: value\n        }\n      }\n    });\n  };\n  const [counter, setCounter] = useState(0);\n  const [arduino, setArduino] = useState(0);\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useQuery(GET_CLIENTS);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      refetch();\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [refetch]);\n\n  ///////////////////////////\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      axios.get('http://localhost:3005/readfile?filename=Arduino.txt').then(response => {\n        const value = JSON.stringify(response.data).trim(); // Convert to string and trim any whitespace from the file contents\n        console.log(`${value}`);\n        if (value != \"0\") {\n          setCounter(NumberConverter(value, props.number));\n          console.log(NumberConverter(value, props.number));\n          setArduino(1);\n        } else {\n          setArduino(0);\n        }\n      }).catch(error => console.error(error));\n    }, 1000);\n    if (data && data.clients) {\n      const output = converter(data).toString();\n      console.log(output);\n      axios.post('http://localhost:3005/writefile', {\n        filename: 'site.txt',\n        data: output\n      }).then(response => console.log(response)).catch(error => console.error(error));\n      if (arduino == 0) {\n        setCounter(parseInt(data.clients[props.number].state, 10));\n      }\n    }\n  }, [data]);\n  const increment = () => {\n    if (counter < 3 && arduino == 0) {\n      handleEdit(data.clients[props.number].id, (counter + 1).toString());\n      setCounter(counter + 1);\n    } else if (arduino == 0) {\n      handleEdit(data.clients[props.number].id, \"0\");\n      setCounter(0);\n    }\n  };\n  if (counter === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"LedSquare ledOff\",\n      onClick: increment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  } else if (counter === 1) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"LedSquare ledOn33\",\n      onClick: increment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this);\n  } else if (counter === 2) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"LedSquare ledOn66\",\n      onClick: increment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"LedSquare ledOn100\",\n      onClick: increment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this);\n  }\n};\n_s(LED, \"4MQaGPqAVeV/YmGc1ZVuzFqJ3pw=\", false, function () {\n  return [useMutation, useQuery];\n});\n_c = LED;\nexport default LED;\nvar _c;\n$RefreshReg$(_c, \"LED\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useQuery","useMutation","gql","converter","NumberConverter","axios","GET_CLIENTS","EDIT_CLIENT","LED","props","editClient","editClientInfo","handleEdit","id","value","result","variables","editClientObject","state","counter","setCounter","arduino","setArduino","data","loading","error","refetch","intervalId","setInterval","clearInterval","get","then","response","JSON","stringify","trim","console","log","number","catch","clients","output","toString","post","filename","parseInt","increment"],"sources":["/Users/code/Desktop/WEB/lab-sistemas/frontend/src/Components/LED.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport { converter } from \"./binDec\";\nimport { NumberConverter } from \"./ArduinoData\";\nimport axios from 'axios';\n\nexport const GET_CLIENTS = gql`\n  query {\n    clients {\n      id\n      state\n    }\n  }\n`;\n\nexport const EDIT_CLIENT = gql`\n  mutation editClient($editClientObject: EditClientInput!) {\n    editClient(editClientObject: $editClientObject) {\n      id\n      state\n    }\n  }\n`;\n\nconst LED = (props) => {\n\n    const [editClient, editClientInfo] = useMutation(EDIT_CLIENT);\n\n    const handleEdit = async (id, value) => {\n        const result = await editClient({\n          variables: {\n            editClientObject: {\n              id: id,\n              state: value\n            }\n          }\n        });\n      };\n\n    const [counter, setCounter] = useState(0);\n    const [arduino, setArduino] = useState(0);\n    const { data, loading, error, refetch } = useQuery(GET_CLIENTS);\n\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            refetch();\n        }, 1000);\n \n        return () => clearInterval(intervalId);\n    }, [refetch]);\n\n    \n    \n  \n///////////////////////////\n    useEffect(() => {\n\n      const intervalId = setInterval(() => {\n        axios.get('http://localhost:3005/readfile?filename=Arduino.txt')\n        .then(response => {\n            const value = JSON.stringify(response.data).trim(); // Convert to string and trim any whitespace from the file contents\n            console.log(`${value}`);\n            if(value != \"0\")\n            {\n              setCounter(NumberConverter(value, props.number));\n              console.log(NumberConverter(value, props.number))\n              setArduino(1);\n            }else{\n              setArduino(0);\n            }\n        })\n        .catch(error => console.error(error));\n    }, 1000);\n\n\n\n        if (data && data.clients) {\n            const output = converter(data).toString();\n            console.log(output);\n            axios.post('http://localhost:3005/writefile', { filename: 'site.txt', data: output })\n            .then(response => console.log(response))\n            .catch(error => console.error(error));\n            if(arduino == 0)\n            {\n              setCounter(parseInt(data.clients[props.number].state, 10));\n            }\n              \n        }\n    }, [data]);\n\n    const increment = () => {\n        if(counter < 3 && arduino == 0)\n        { \n            handleEdit(data.clients[props.number].id,(counter+1).toString());\n            setCounter(counter+1); \n        }else if(arduino == 0) {\n            handleEdit(data.clients[props.number].id, \"0\")\n            setCounter(0);  \n        } \n    }; \n\n    if(counter === 0)\n    {\n        return(\n            <div className='LedSquare ledOff' onClick={increment}>\n                \n        </div>\n    );\n    }else if(counter === 1)\n    {\n        return(\n            <div className='LedSquare ledOn33' onClick={increment}>\n               \n           </div>\n        );  \n    }else if(counter === 2)\n    {\n        return(\n            <div className='LedSquare ledOn66' onClick={increment}>\n                \n           </div>\n        );  \n    }else\n    {\n        return(\n            <div className='LedSquare ledOn100' onClick={increment}>\n                \n           </div>\n        );  \n    }\n};\n\nexport default LED;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}