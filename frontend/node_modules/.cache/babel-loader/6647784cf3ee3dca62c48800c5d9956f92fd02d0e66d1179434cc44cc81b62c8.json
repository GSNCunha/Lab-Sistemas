{"ast":null,"code":"var _jsxFileName = \"/Users/code/Desktop/Desktop - WEB/WEB/lab-sistemas/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Grid from \"./Components/Grid\";\nimport React, { useState, createContext } from \"react\";\nimport { useLazyQuery, useQuery, useMutation, gql } from \"@apollo/client\";\nimport { client } from \"./lib/apollo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext(null);\nexport const GET_CLIENTS = gql`\n  query {\n    clients {\n      id\n      state\n    }\n  }\n`;\nconst GET_CLIENT = gql`\n  query client($clientId: String!) {\n    client(id: $clientId) {\n      id\n      state\n    }\n  }\n`;\nexport const EDIT_CLIENT = gql`\n  mutation editClient($editClientObject: EditClientInput!) {\n    editClient(editClientObject: $editClientObject) {\n      id\n      state\n    }\n  }\n`;\nfunction App() {\n  _s();\n  const [values, setValues] = useState({\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    adress: \"\",\n    tel: \"\",\n    cpf: \"\"\n  });\n  const [editClient, editClientInfo] = useMutation(EDIT_CLIENT);\n  const [getClient, getClientInfo] = useLazyQuery(GET_CLIENT);\n  async function handleEditClient() {\n    await editClient({\n      variables: {\n        editClientObject: values\n      },\n      update: (cache, _ref) => {\n        let {\n          data\n        } = _ref;\n        const clientsReponse = client.readQuery({\n          query: GET_CLIENTS\n        });\n        cache.writeQuery({\n          query: GET_CLIENT,\n          data: {\n            clients: clientsReponse === null || clientsReponse === void 0 ? void 0 : clientsReponse.clients.map(client => {\n              if (client.id === \"0\") return {\n                id: client.id,\n                state: \"25\"\n              };\n              return client;\n            })\n          }\n        });\n      }\n    });\n  }\n  handleEditClient();\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_CLIENTS);\n  console.log(data === null || data === void 0 ? void 0 : data.clients[0].state);\n  const [bin, setBin] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      bin,\n      setBin\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kXiyHgA+5VhCydEI0/EGwj6X9EI=\", false, function () {\n  return [useMutation, useLazyQuery, useQuery];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Grid","React","useState","createContext","useLazyQuery","useQuery","useMutation","gql","client","AppContext","GET_CLIENTS","GET_CLIENT","EDIT_CLIENT","App","values","setValues","id","name","email","adress","tel","cpf","editClient","editClientInfo","getClient","getClientInfo","handleEditClient","variables","editClientObject","update","cache","data","clientsReponse","readQuery","query","writeQuery","clients","map","state","loading","error","console","log","bin","setBin"],"sources":["/Users/code/Desktop/Desktop - WEB/WEB/lab-sistemas/frontend/src/App.js"],"sourcesContent":[" import './App.css';\nimport Grid from \"./Components/Grid\";\nimport React, {useState, createContext} from \"react\";\nimport { useLazyQuery, useQuery, useMutation, gql } from \"@apollo/client\";\nimport { client } from \"./lib/apollo\";\n\n\nexport const AppContext = createContext(null);\n\n\nexport const GET_CLIENTS = gql`\n  query {\n    clients {\n      id\n      state\n    }\n  }\n`;\n\nconst GET_CLIENT = gql`\n  query client($clientId: String!) {\n    client(id: $clientId) {\n      id\n      state\n    }\n  }\n`;\n\n\nexport const EDIT_CLIENT = gql`\n  mutation editClient($editClientObject: EditClientInput!) {\n    editClient(editClientObject: $editClientObject) {\n      id\n      state\n    }\n  }\n`;\n\nfunction App() {\n  const [values, setValues] = useState({\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    adress: \"\",\n    tel: \"\",\n    cpf: \"\",\n  });\n  const [editClient, editClientInfo ] = useMutation(EDIT_CLIENT);\n  const [getClient, getClientInfo] = useLazyQuery(GET_CLIENT);\n\n  async function handleEditClient() {\n    await editClient({\n      variables: {\n        editClientObject: values,\n      },\n      update: (cache, { data }) => {\n        const clientsReponse = client.readQuery({\n          query: GET_CLIENTS,\n        });\n\n        cache.writeQuery({\n          query: GET_CLIENT,\n          data: {\n            clients: clientsReponse?.clients.map((client) => {\n              if (client.id === \"0\")\n                return {\n                  id: client.id,\n                  state: \"25\"\n                };\n              return client;\n            }),\n          },\n        });\n      },\n    });\n  }\n  handleEditClient()\n\n  const {data, loading, error } = useQuery(GET_CLIENTS);\n  console.log(data?.clients[0].state);\n  const [bin, setBin] = useState(\"\")\n  \n  return (\n    <AppContext.Provider value={{bin, setBin}}>\n      <div className='App'>\n        <Grid/>\n      </div>\n    </AppContext.Provider>\n  );\n}\nexport default App;\n"],"mappings":";;AAAC,OAAO,WAAW;AACnB,OAAOA,IAAI,MAAM,mBAAmB;AACpC,OAAOC,KAAK,IAAGC,QAAQ,EAAEC,aAAa,QAAO,OAAO;AACpD,SAASC,YAAY,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,GAAG,QAAQ,gBAAgB;AACzE,SAASC,MAAM,QAAQ,cAAc;AAAC;AAGtC,OAAO,MAAMC,UAAU,gBAAGN,aAAa,CAAC,IAAI,CAAC;AAG7C,OAAO,MAAMO,WAAW,GAAGH,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMI,UAAU,GAAGJ,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAGD,OAAO,MAAMK,WAAW,GAAGL,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASM,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC;IACnCc,EAAE,EAAE,EAAE;IACNC,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVC,GAAG,EAAE,EAAE;IACPC,GAAG,EAAE;EACP,CAAC,CAAC;EACF,MAAM,CAACC,UAAU,EAAEC,cAAc,CAAE,GAAGjB,WAAW,CAACM,WAAW,CAAC;EAC9D,MAAM,CAACY,SAAS,EAAEC,aAAa,CAAC,GAAGrB,YAAY,CAACO,UAAU,CAAC;EAE3D,eAAee,gBAAgB,GAAG;IAChC,MAAMJ,UAAU,CAAC;MACfK,SAAS,EAAE;QACTC,gBAAgB,EAAEd;MACpB,CAAC;MACDe,MAAM,EAAE,CAACC,KAAK,WAAe;QAAA,IAAb;UAAEC;QAAK,CAAC;QACtB,MAAMC,cAAc,GAAGxB,MAAM,CAACyB,SAAS,CAAC;UACtCC,KAAK,EAAExB;QACT,CAAC,CAAC;QAEFoB,KAAK,CAACK,UAAU,CAAC;UACfD,KAAK,EAAEvB,UAAU;UACjBoB,IAAI,EAAE;YACJK,OAAO,EAAEJ,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEI,OAAO,CAACC,GAAG,CAAE7B,MAAM,IAAK;cAC/C,IAAIA,MAAM,CAACQ,EAAE,KAAK,GAAG,EACnB,OAAO;gBACLA,EAAE,EAAER,MAAM,CAACQ,EAAE;gBACbsB,KAAK,EAAE;cACT,CAAC;cACH,OAAO9B,MAAM;YACf,CAAC;UACH;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ;EACAkB,gBAAgB,EAAE;EAElB,MAAM;IAACK,IAAI;IAAEQ,OAAO;IAAEC;EAAM,CAAC,GAAGnC,QAAQ,CAACK,WAAW,CAAC;EACrD+B,OAAO,CAACC,GAAG,CAACX,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,OAAO,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC;EACnC,MAAM,CAACK,GAAG,EAAEC,MAAM,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC;EAElC,oBACE,QAAC,UAAU,CAAC,QAAQ;IAAC,KAAK,EAAE;MAACyC,GAAG;MAAEC;IAAM,CAAE;IAAA,uBACxC;MAAK,SAAS,EAAC,KAAK;MAAA,uBAClB,QAAC,IAAI;QAAA;QAAA;QAAA;MAAA;IAAE;MAAA;MAAA;MAAA;IAAA;EACH;IAAA;IAAA;IAAA;EAAA,QACc;AAE1B;AAAC,GAnDQ/B,GAAG;EAAA,QAS4BP,WAAW,EACdF,YAAY,EA8BfC,QAAQ;AAAA;AAAA,KAxCjCQ,GAAG;AAoDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}