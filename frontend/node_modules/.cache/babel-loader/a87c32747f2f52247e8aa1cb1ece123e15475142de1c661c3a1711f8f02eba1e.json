{"ast":null,"code":"export function NumberConverter(value, led) {\n  const binaryString = toBinaryString(value);\n  const start = (3 - led) * 2; // calculate starting index of substring\n  const binarySubstring = binaryString.substr(start, 2); // get two-digit substring\n  const decimalValue = parseInt(binarySubstring, 2); // convert substring to decimal\n  return decimalValue;\n}\n_c = NumberConverter;\nfunction toBinaryString(num) {\n  return parseInt(num, 10).toString(2).padStart(8, '0');\n}\nvar _c;\n$RefreshReg$(_c, \"NumberConverter\");","map":{"version":3,"names":["NumberConverter","value","led","binaryString","toBinaryString","start","binarySubstring","substr","decimalValue","parseInt","num","toString","padStart"],"sources":["/Users/code/Desktop/WEB/lab-sistemas/frontend/src/Components/ArduinoData.js"],"sourcesContent":["export function NumberConverter(value, led) {\n    const binaryString = toBinaryString(value);\n    const start = (3-led) * 2; // calculate starting index of substring\n    const binarySubstring = binaryString.substr(start, 2); // get two-digit substring\n    const decimalValue = parseInt(binarySubstring, 2); // convert substring to decimal\n    return decimalValue;\n  }\n  \n  function toBinaryString(num) {\n    return parseInt(num, 10).toString(2).padStart(8, '0');\n  }"],"mappings":"AAAA,OAAO,SAASA,eAAe,CAACC,KAAK,EAAEC,GAAG,EAAE;EACxC,MAAMC,YAAY,GAAGC,cAAc,CAACH,KAAK,CAAC;EAC1C,MAAMI,KAAK,GAAG,CAAC,CAAC,GAACH,GAAG,IAAI,CAAC,CAAC,CAAC;EAC3B,MAAMI,eAAe,GAAGH,YAAY,CAACI,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;EACvD,MAAMG,YAAY,GAAGC,QAAQ,CAACH,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC;EACnD,OAAOE,YAAY;AACrB;AAAC,KANaR,eAAe;AAQ7B,SAASI,cAAc,CAACM,GAAG,EAAE;EAC3B,OAAOD,QAAQ,CAACC,GAAG,EAAE,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;AACvD;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}